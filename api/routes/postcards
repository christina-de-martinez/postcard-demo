const Postcards = require("../models/postcards");
const router = require("express").Router();
const mongoose = require("mongoose");
const { Resend } = require("resend");
const { buildEmail } = require("../notificationEmail");

router.get("/", async (req, res) => {
    try {
        if (mongoose.connection.readyState !== 1) {
            return res.status(500).json({ error: "Database not connected" });
        }

        const postcards = await Postcards.find()
            .sort({
                createdAt: -1,
            })
            .limit(50);
        res.status(200).json(postcards);
    } catch (err) {
        res.status(500).json({
            error: err.message || "Failed to fetch postcards",
        });
    }
});

router.post("/cancelEmail", async (req, res) => {
    try {
        if (!req.body.id) {
            return res.status(400).json({ error: "Email ID is required" });
        }

        const resend = new Resend(process.env.RESEND_API_KEY);
        const response = await resend.emails.cancel(req.body.id);

        res.status(200).json(response);
    } catch (err) {
        res.status(500).json({
            error: err.message || "Failed to cancel email",
        });
    }
});

const sendResendEmail = async (req) => {
    const resend = new Resend(process.env.RESEND_API_KEY);

    const { plainTextEmail, htmlEmail } = buildEmail({
        userName: req.body.name ?? "Someone",
        message: req.body.message ?? "Message not found",
        location: req.body.location ?? "Somewhere",
    });

    const body = {
        payload: {
            from: "Snailmail.dev <postman@postcards.snailmail.dev>",
            to: "hi@christinacodes.dev",
            subject: `New postcard from ${req.body.name ?? "someone"}`,
            html: htmlEmail,
            plainText: plainTextEmail,
        },
        options: {
            idempotencyKey: `postcard-created/${req.body.name}/${req.body.location}/${req.body.imageUrl}`,
        },
    };
    if (req.schedule) {
        body.payload = { ...body.payload, scheduledAt: "in 10 sec" };
    } else {
        body.payload = {
            ...body.payload,
            attachments: [
                {
                    path: req.body.imageUrl,
                    filename: "postcard.jpg",
                },
            ],
        };
    }

    return await resend.emails.send({ ...body.payload }, { ...body.options });
};

const submitPostcard = async (req) => {
    const newPostcard = new Postcards(req.body);

    return await newPostcard.save().catch((err) => console.log(err));
};

router.post("/create", async (req, res) => {
    try {
        await submitPostcard(req);

        const emailResponse = await sendResendEmail({ ...req, schedule: true });

        res.status(200).json({
            ...emailResponse,
            emailId: emailResponse.data?.id,
        });
    } catch (err) {
        console.error("Create postcard error:", err);
        res.status(500).json(err);
    }
});

router.post("/createWithAttachment", async (req, res) => {
    try {
        await submitPostcard(req);

        const emailResponse = await sendResendEmail({
            ...req,
            schedule: false,
        });

        res.status(200).json({
            ...emailResponse,
            emailId: emailResponse.data?.id,
        });
    } catch (err) {
        console.error("Create postcard with attachment error:", err);
        res.status(500).json(err);
    }
});

module.exports = router;
